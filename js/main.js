// HAIRGATOR Main Application Logic - Final Version
document.addEventListener('DOMContentLoaded', function() {
    // Global variables
    let currentGender = null;
    let currentCategory = null;
    let currentSubcategory = 'None';
    let menuData = {};

    // Elements
    const backBtn = document.getElementById('backBtn');
    const menuBtn = document.getElementById('menuBtn');
    const sidebar = document.getElementById('sidebar');
    const sidebarClose = document.getElementById('sidebarClose');
    const themeToggle = document.getElementById('themeToggle');
    const themeToggleBottom = document.getElementById('themeToggleBottom');
    const themeStatus = document.getElementById('themeStatus');
    const logoutBtn = document.getElementById('logoutBtn');
    const genderSelection = document.getElementById('genderSelection');
    const menuContainer = document.getElementById('menuContainer');
    const categoryTabs = document.getElementById('categoryTabs');
    const categoryDescription = document.getElementById('categoryDescription');
    const subcategoryTabs = document.getElementById('subcategoryTabs');
    const menuGrid = document.getElementById('menuGrid');
    const loadingOverlay = document.getElementById('loadingOverlay');
    
    // Modal elements
    const styleModal = document.getElementById('styleModal');
    const modalClose = document.getElementById('modalClose');
    const modalImage = document.getElementById('modalImage');
    const modalCode = document.getElementById('modalCode');
    const modalName = document.getElementById('modalName');
    const btnRegister = document.getElementById('btnRegister');
    const btnLike = document.getElementById('btnLike');

    // ü¶é HAIRGATOR 3-Tier Í∂åÌïú ÏãúÏä§ÌÖú Î©îÎâ¥ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞
    const MENU_DATA = {
        male: {
            categories: [
                { 
                    id: 'side-fringe', 
                    name: 'SIDE FRINGE',
                    description: 'ÏÇ¨Ïù¥Îìú ÌîÑÎ¶∞ÏßÄÎäî ÌÅ¥ÎûòÏãùÌï®Í≥º Î™®ÎçòÌï®Ïùò ÎåÄÎ™ÖÏÇ¨Î°ú Ïä§ÌÉÄÏùºÎßÅÏù¥ Îî∞Îùº ÏõêÌïòÎäî Ïù¥ÎØ∏ÏßÄÎ•º ÏûêÏú†Î°≠Í≤å ÌëúÌòÑÌï† Ïàò ÏûàÏäµÎãàÎã§. Í∞ÄÎ•¥ÎßàÎ•º Í∏∞Ï§ÄÏúºÎ°ú Îã®ÏàúÌûà ÎÑòÏñ¥Í∞ÄÎäî Ïä§ÌÉÄÏùºÏùÑ ÎÑòÏñ¥ Í∞úÏù∏Ïùò ÌäπÏÑ±Í≥º Ìä∏Î†åÎìúÏóê ÎßûÏ∂∞ Í≥†Í∏â ÌÖåÏù¥ÌçºÎßÅÏùÑ ÌëúÌòÑÌïòÎäî Í≤ÉÏù¥ Îß§Ïö∞ Ï§ëÏöîÌï©ÎãàÎã§.'
                },
                { 
                    id: 'side-part', 
                    name: 'SIDE PART',
                    description: 'ÏÇ¨Ïù¥Îìú ÌååÌä∏Îäî Ï†ïÍ∞àÌïòÍ≥† Îã®Ï†ïÌïú Ïä§ÌÉÄÏùºÎ°ú ÎπÑÏ¶àÎãàÏä§Îß®Îì§ÏóêÍ≤å Ïù∏Í∏∞Í∞Ä ÎßéÏäµÎãàÎã§.'
                },
                { 
                    id: 'fringe-up', 
                    name: 'FRINGE UP',
                    description: 'ÌîÑÎ¶∞ÏßÄ ÏóÖÏùÄ ÏïûÎ®∏Î¶¨Î•º Ïò¨Î†§ Ïù¥ÎßàÎ•º ÎìúÎü¨ÎÇ¥Îäî ÏãúÏõêÌïú Ïä§ÌÉÄÏùºÏûÖÎãàÎã§.'
                },
                { 
                    id: 'pushed-back', 
                    name: 'PUSHED BACK',
                    description: 'Ìë∏ÏãúÎ∞±ÏùÄ Î®∏Î¶¨Î•º Îí§Î°ú ÎÑòÍ∏¥ ÎåÑÎîîÌïú Ïä§ÌÉÄÏùºÏûÖÎãàÎã§.'
                },
                { 
                    id: 'buzz', 
                    name: 'BUZZ',
                    description: 'Î≤ÑÏ¶àÏª∑ÏùÄ ÏßßÍ≥† ÍπîÎÅîÌïú Ïä§ÌÉÄÏùºÎ°ú Í¥ÄÎ¶¨Í∞Ä Ìé∏Ìï©ÎãàÎã§.'
                },
                { 
                    id: 'crop', 
                    name: 'CROP',
                    description: 'ÌÅ¨Î°≠ Ïä§ÌÉÄÏùºÏùÄ ÏßßÏúºÎ©¥ÏÑúÎèÑ Ïä§ÌÉÄÏùºÎ¶¨ÏãúÌïú ÎäêÎÇåÏùÑ Ï§çÎãàÎã§.'
                },
                { 
                    id: 'mohican', 
                    name: 'MOHICAN',
                    description: 'Î™®ÌûàÏπ∏ Ïä§ÌÉÄÏùºÏùÄ Í∞úÏÑ± ÏûàÍ≥† Í∞ïÌïú Ïù∏ÏÉÅÏùÑ Ï§çÎãàÎã§.'
                }
            ],
            subcategories: ['None', 'Fore Head', 'Eye Brow', 'Eye', 'Cheekbone']
        },
        female: {
            categories: [
                { 
                    id: 'a-length', 
                    name: 'A Length',
                    description: 'A Í∏∏Ïù¥Îäî Í∞ÄÏä¥ÏÑ† ÏïÑÎûòÎ°ú ÎÇ¥Î†§Ïò§Îäî Î°±Ìó§Ïñ¥Î°ú, ÏõêÎû≠Ïä§¬∑Î†àÏù¥Ïñ¥Îìú Î°±¬∑ÍµµÏùÄ SÏª¨Ïù¥ Ïûò ÎßûÏïÑ Ïö∞ÏïÑÌïòÍ≥† ÎìúÎùºÎßàÌã±Ìïú Î∂ÑÏúÑÍ∏∞Î•º ÎÉÖÎãàÎã§.'
                },
                { 
                    id: 'b-length', 
                    name: 'B Length',
                    description: 'B Í∏∏Ïù¥Îäî Í∞ÄÏä¥ ÏïÑÎûò(A)ÏôÄ ÏáÑÍ≥® ÏïÑÎûò(C) ÏÇ¨Ïù¥Ïùò ÎØ∏ÎîîÏóÑ-Î°±ÏúºÎ°ú, Î†àÏù¥Ïñ¥Îìú ÎØ∏ÎîîÏóÑÎ°±¬∑Î∞îÎîîÌéåÏù¥ Ïñ¥Ïö∏Î†§ Î∂ÄÎìúÎüΩÍ≥† Ïã§Ïö©Ï†ÅÏù∏ Ïù∏ÏÉÅÏùÑ Ï§çÎãàÎã§.'
                },
                { 
                    id: 'c-length', 
                    name: 'C Length',
                    description: 'C Í∏∏Ïù¥Îäî ÏáÑÍ≥® ÎùºÏù∏ ÏïÑÎûòÏùò ÏÑ∏ÎØ∏ Î°±ÏúºÎ°ú, Î†àÏù¥Ïñ¥Îìú C/SÏª¨¬∑ÏóêÏñ¥Î¶¨ÌéåÍ≥º Ïûò ÎßûÏïÑ Îã®Ï†ïÌïòÍ≥† ÏÑ∏Î†®Îêú Ïò§ÌîºÏä§ Î¨¥ÎìúÎ•º ÎÉÖÎãàÎã§.'
                },
                { 
                    id: 'd-length', 
                    name: 'D Length',
                    description: 'D Í∏∏Ïù¥Îäî Ïñ¥Íπ®Ïóê Ï†ïÌôïÌûà ÎãøÎäî Í∏∏Ïù¥Î°ú, LOB¬∑ÏàÑÎçî CÏª¨¬∑ÎπåÎìúÌéåÏù¥ Ïñ¥Ïö∏Î†§ Ìä∏Î†åÎîîÌïòÍ≥† ÍπîÎÅîÌïú ÎäêÎÇåÏùÑ Ï§çÎãàÎã§.'
                },
                { 
                    id: 'e-length', 
                    name: 'E Length',
                    description: 'E Í∏∏Ïù¥Îäî Ïñ¥Íπ® Î∞îÎ°ú ÏúÑÏùò Îã®Î∞úÎ°ú, ÌÅ¥ÎûòÏãù Î≥¥Î∏å¬∑AÎùºÏù∏ Î≥¥Î∏å¬∑ÎÇ¥/Ïô∏ CÏª¨Ïù¥ Ïûò ÎßûÏïÑ Í≤ΩÏæåÌïòÍ≥† Î™®ÎçòÌïú Ïù∏ÏÉÅÏùÑ ÎßåÎì≠ÎãàÎã§.'
                },
                { 
                    id: 'f-length', 
                    name: 'F Length',
                    description: 'F Í∏∏Ïù¥Îäî ÌÑ±ÏÑ† Î∞îÎ°ú Î∞ë Î≥¥Î∏å Í∏∏Ïù¥Î°ú, ÌîÑÎ†åÏπò Î≥¥Î∏å¬∑ÏùºÏûê Îã®Î∞ú¬∑ÌÖçÏä§Ï≤ò Î≥¥Î∏åÍ∞Ä Ïñ¥Ïö∏Î†§ ÏãúÌÅ¨ÌïòÍ≥† ÎèÑÌöåÏ†ÅÏù∏ Î∂ÑÏúÑÍ∏∞Î•º Ïó∞Ï∂úÌï©ÎãàÎã§.'
                },
                { 
                    id: 'g-length', 
                    name: 'G Length',
                    description: 'G Í∏∏Ïù¥Îäî ÌÑ±ÏÑ†Í≥º Í∞ôÏùÄ ÎÜíÏù¥Ïùò ÎØ∏Îãà Î≥¥Î∏åÎ°ú, ÌÅ¥ÎûòÏãù ÌÑ±ÏÑ† Î≥¥Î∏å¬∑ÎØ∏Îãà Î†àÏù¥Ïñ¥ Î≥¥Î∏åÍ∞Ä Ïûò ÎßûÏïÑ ÎòêÎ†∑ÌïòÍ≥† ÎØ∏ÎãàÎ©ÄÌïú Î¨¥ÎìúÎ•º Ï§çÎãàÎã§.'
                },
                { 
                    id: 'h-length', 
                    name: 'H Length',
                    description: 'H Í∏∏Ïù¥Îäî Í∑ÄÏÑ†~Î≤†Î¶¨Ïàè Íµ¨Í∞ÑÏùò ÏàèÌó§Ïñ¥Î°ú, ÌîΩÏãú¬∑ÏÉ§Í∑∏ Ïàè¬∑ÌóàÏâ¨ Ïàè Îì±Ïù¥ Ïñ¥Ïö∏Î†§ ÌôúÎèôÏ†ÅÏù¥Í≥† Í∞úÏÑ± ÏûàÎäî Ïä§ÌÉÄÏùºÏùÑ ÏôÑÏÑ±Ìï©ÎãàÎã§.'
                }
            ],
            subcategories: ['None', 'Fore Head', 'Eye Brow', 'Eye', 'Cheekbone']
        }
    };

    // Initialize Application
    init();

    function init() {
        console.log('ü¶é HAIRGATOR Ï¥àÍ∏∞Ìôî ÏãúÏûë...');
        setupEventListeners();
        loadTheme();
        checkAuthStatus();
        
        if (backBtn) {
            backBtn.style.display = 'none';
        }
        
        console.log('‚úÖ HAIRGATOR Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }

    // Event Listeners Setup
    function setupEventListeners() {
        // Back Button
        if (backBtn) {
            backBtn.addEventListener('click', handleBack);
        }

        // Menu Button
        if (menuBtn) {
            menuBtn.addEventListener('click', openSidebar);
        }

        // Sidebar Close
        if (sidebarClose) {
            sidebarClose.addEventListener('click', closeSidebar);
        }

        // Theme Toggles
        if (themeToggle) {
            themeToggle.addEventListener('click', toggleTheme);
        }

        if (themeToggleBottom) {
            themeToggleBottom.addEventListener('click', toggleTheme);
        }

        // Logout Button
        if (logoutBtn) {
            logoutBtn.addEventListener('click', handleLogout);
        }

        // Gender Selection Buttons
        document.querySelectorAll('.gender-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                console.log(`üéØ ÏÑ±Î≥Ñ ÏÑ†ÌÉù: ${this.dataset.gender}`);
                selectGender(this.dataset.gender);
            });
        });

        // Modal Events
        if (modalClose) {
            modalClose.addEventListener('click', closeModal);
        }

        if (styleModal) {
            styleModal.addEventListener('click', function(e) {
                if (e.target === styleModal) {
                    closeModal();
                }
            });
        }

        // Keyboard Events
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && styleModal && styleModal.classList.contains('active')) {
                closeModal();
            }
        });
        
        // Click Outside Sidebar
        document.addEventListener('click', function(e) {
            if (sidebar && sidebar.classList.contains('active')) {
                if (!sidebar.contains(e.target) && !menuBtn.contains(e.target)) {
                    closeSidebar();
                }
            }
        });

        console.log('‚úÖ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï ÏôÑÎ£å');
    }

    // Navigation Functions
    function handleBack() {
        if (menuContainer.classList.contains('active')) {
            menuContainer.classList.remove('active');
            genderSelection.style.display = 'flex';
            backBtn.style.display = 'none';
            
            if (themeToggleBottom) {
                themeToggleBottom.style.display = 'flex';
            }
            
            currentGender = null;
            currentCategory = null;
            console.log('üîô ÏÑ±Î≥Ñ ÏÑ†ÌÉù ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô');
        }
    }

    // Sidebar Functions
    function openSidebar() {
        sidebar.classList.add('active');
    }

    function closeSidebar() {
        sidebar.classList.remove('active');
    }

    // Theme Functions
    function loadTheme() {
        const savedTheme = localStorage.getItem('hairgator_theme') || 'dark';
        if (savedTheme === 'light') {
            document.body.classList.add('light-theme');
            if (themeStatus) themeStatus.textContent = 'OFF';
        }
        console.log(`üé® ÌÖåÎßà Î°úÎìú: ${savedTheme}`);
    }

    function toggleTheme() {
        document.body.classList.toggle('light-theme');
        const isLight = document.body.classList.contains('light-theme');
        
        if (themeStatus) {
            themeStatus.textContent = isLight ? 'OFF' : 'ON';
        }
        
        localStorage.setItem('hairgator_theme', isLight ? 'light' : 'dark');
        console.log(`üé® ÌÖåÎßà Î≥ÄÍ≤Ω: ${isLight ? 'light' : 'dark'}`);
    }

    // Authentication Functions
    function checkAuthStatus() {
        const designerInfo = document.getElementById('designerInfo');
        if (window.auth && window.auth.currentUser) {
            if (designerInfo) designerInfo.style.display = 'block';
            const designerNameEl = document.getElementById('designerName');
            if (designerNameEl) {
                designerNameEl.textContent = window.auth.currentUser.displayName || window.auth.currentUser.email;
            }
            console.log('‚úÖ ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÌôïÏù∏ ÏôÑÎ£å');
        }
    }

    async function handleLogout() {
        if (confirm('Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
            try {
                if (window.authManager) {
                    await window.authManager.signOut();
                }
                location.reload();
            } catch (error) {
                console.error('‚ùå Î°úÍ∑∏ÏïÑÏõÉ Ïò§Î•ò:', error);
                showToast('Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®: ' + error.message);
            }
        }
    }

    // Gender Selection
    function selectGender(gender) {
        currentGender = gender;
        
        genderSelection.style.display = 'none';
        menuContainer.classList.add('active');
        
        if (backBtn) {
            backBtn.style.display = 'flex';
        }
        
        if (themeToggleBottom) {
            themeToggleBottom.style.display = 'none';
        }
        
        loadMenuData(gender);
        localStorage.setItem('hairgator_gender', gender);
        
        console.log(`‚úÖ ÏÑ±Î≥Ñ ÏÑ†ÌÉù ÏôÑÎ£å: ${gender}`);
    }

    // Menu Data Loading with Error Handling
    function loadMenuData(gender) {
        showLoading(true);
        
        // ÏÑ±Î≥Ñ Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ ÌôïÏù∏
        if (!MENU_DATA[gender]) {
            console.error(`‚ùå Gender data not found: ${gender}`);
            showToast(`‚ùå ${gender} Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`);
            showLoading(false);
            return;
        }
        
        menuData = MENU_DATA[gender];
        
        // categories Î∞∞Ïó¥ Ï°¥Ïû¨ ÌôïÏù∏
        if (!menuData.categories || !Array.isArray(menuData.categories)) {
            console.error(`‚ùå Categories not found for gender: ${gender}`);
            showToast(`‚ùå ${gender} Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.`);
            showLoading(false);
            return;
        }
        
        console.log(`‚úÖ Î©îÎâ¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å - ${gender}:`, {
            categories: menuData.categories.length,
            subcategories: menuData.subcategories.length
        });
        
        renderCategories(gender);
        
        if (menuData.categories.length > 0) {
            selectCategory(menuData.categories[0], gender);
        }
        
        setTimeout(() => showLoading(false), 300);
    }

    // Render Categories with Enhanced Error Handling
    function renderCategories(gender) {
        if (!categoryTabs) {
            console.error('‚ùå Category tabs container not found');
            return;
        }
        
        categoryTabs.innerHTML = '';
        
        // Ïó¨ÏÑ±Ïù∏ Í≤ΩÏö∞ Îß® ÏïûÏóê Î¨ºÏùåÌëú ÎèÑÏõÄÎßê Î≤ÑÌäº Ï∂îÍ∞Ä
        if (gender === 'female') {
            const helpTab = document.createElement('button');
            helpTab.className = 'category-tab help-tab';
            helpTab.innerHTML = '?';
            helpTab.title = 'Í∏∏Ïù¥ Í∞ÄÏù¥Îìú Î≥¥Í∏∞';
            helpTab.addEventListener('click', function() {
                window.open('https://drive.google.com/file/d/15OgT9k5jCC6TjcJSImuQXcznS_HtFBVf/view?usp=sharing', '_blank');
            });
            categoryTabs.appendChild(helpTab);
        }
        
        // Categories ÏïàÏ†Ñ Ï≤¥ÌÅ¨
        if (!menuData || !menuData.categories || !Array.isArray(menuData.categories)) {
            console.error('‚ùå MenuData categories is invalid:', menuData);
            showToast('‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞Î•º Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
            return;
        }
        
        // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÉ≠ ÏÉùÏÑ±
        menuData.categories.forEach((category, index) => {
            const tab = document.createElement('button');
            tab.className = 'category-tab';
            tab.textContent = category.name || 'Unknown';
            tab.dataset.categoryId = category.id || `category-${index}`;
            tab.title = category.description || category.name;
            
            if (index === 0) {
                tab.classList.add('active', gender);
            }
            
            tab.addEventListener('click', function() {
                selectCategory(category, gender);
            });
            
            categoryTabs.appendChild(tab);
        });
        
        console.log(`‚úÖ ${menuData.categories.length}Í∞ú Ïπ¥ÌÖåÍ≥†Î¶¨ Î†åÎçîÎßÅ ÏôÑÎ£å - ${gender}`);
    }

    // Select Category
    function selectCategory(category, gender) {
        currentCategory = category;
        
        // ÌÉ≠ ÌôúÏÑ±Ìôî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        document.querySelectorAll('.category-tab').forEach(tab => {
            if (tab.classList.contains('help-tab')) return; // Î¨ºÏùåÌëú Î≤ÑÌäºÏùÄ Ï†úÏô∏
            tab.classList.remove('active', 'male', 'female');
            if (tab.dataset.categoryId === category.id) {
                tab.classList.add('active', gender);
            }
        });
        
        // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Î™Ö ÏóÖÎç∞Ïù¥Ìä∏
        if (categoryDescription) {
            categoryDescription.textContent = category.description || '';
        }
        
        renderSubcategories(gender);
        loadStyles(category.id, currentSubcategory, gender);
        
        console.log(`üéØ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù: ${category.name} (${gender})`);
    }

    // Render Subcategories
    function renderSubcategories(gender) {
        if (!subcategoryTabs) return;
        
        subcategoryTabs.innerHTML = '';
        
        const subcategories = menuData.subcategories || [];
        
        subcategories.forEach((sub, index) => {
            const tab = document.createElement('button');
            tab.className = 'subcategory-tab';
            tab.textContent = sub;
            tab.dataset.subcategory = sub;
            
            if (index === 0) {
                tab.classList.add('active', gender);
                currentSubcategory = sub;
            }
            
            tab.addEventListener('click', function() {
                selectSubcategory(sub, gender);
            });
            
            subcategoryTabs.appendChild(tab);
        });
        
        console.log(`‚úÖ ${subcategories.length}Í∞ú ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨ Î†åÎçîÎßÅ ÏôÑÎ£å`);
    }

    // Select Subcategory
    function selectSubcategory(subcategory, gender) {
        currentSubcategory = subcategory;
        
        document.querySelectorAll('.subcategory-tab').forEach(tab => {
            tab.classList.remove('active', 'male', 'female');
            if (tab.dataset.subcategory === subcategory) {
                tab.classList.add('active', gender);
            }
        });
        
        loadStyles(currentCategory.id, subcategory, gender);
        
        console.log(`üéØ ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù: ${subcategory}`);
    }

    // Load Styles from Firebase with Enhanced Error Handling
    async function loadStyles(categoryId, subcategory, gender) {
        if (!menuGrid) return;
        
        menuGrid.innerHTML = '<div class="loading"><div class="loading-spinner"></div></div>';
        
        try {
            // Firebase Ï¥àÍ∏∞Ìôî ÌôïÏù∏
            if (typeof db === 'undefined') {
                console.error('‚ùå Firebase not initialized');
                menuGrid.innerHTML = `
                    <div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #999;">
                        <div style="font-size: 48px; margin-bottom: 20px;">üîÑ</div>
                        <div>Firebase Ïó∞Í≤∞ Ï§ë...</div>
                    </div>
                `;
                return;
            }
            
            // ÌòÑÏû¨ Ïπ¥ÌÖåÍ≥†Î¶¨ Ïù¥Î¶Ñ Ï∞æÍ∏∞
            const categoryName = currentCategory?.name || 'Unknown';
            console.log('üì± Ïä§ÌÉÄÏùº Î°úÎî© Ï§ë:', { gender, categoryName, subcategory });
            
            // FirebaseÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            const query = db.collection('hairstyles')
                .where('gender', '==', gender)
                .where('mainCategory', '==', categoryName)
                .where('subCategory', '==', subcategory);
            
            const snapshot = await query.get();
            
            menuGrid.innerHTML = '';
            
            // Í≤∞Í≥ºÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞
            if (snapshot.empty) {
                menuGrid.innerHTML = `
                    <div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #999;">
                        <div style="font-size: 48px; margin-bottom: 20px;">üì≠</div>
                        <div style="font-size: 16px; margin-bottom: 8px;">Îì±Î°ùÎêú Ïä§ÌÉÄÏùºÏù¥ ÏóÜÏäµÎãàÎã§</div>
                        <div style="font-size: 12px; color: #666;">
                            ${categoryName} - ${subcategory}
                        </div>
                    </div>
                `;
                console.log(`üì≠ Ïä§ÌÉÄÏùº ÏóÜÏùå: ${categoryName} - ${subcategory}`);
                return;
            }
            
            // Ïä§ÌÉÄÏùº Ïπ¥Îìú ÏÉùÏÑ±
            let styleCount = 0;
            snapshot.forEach(doc => {
                const data = doc.data();
                const item = document.createElement('div');
                item.className = `menu-item ${gender}`;
                
                // Ïù¥ÎØ∏ÏßÄÏôÄ Ï†ïÎ≥¥ ÌëúÏãú
                item.innerHTML = `
                    <img src="${data.imageUrl || ''}" 
                         alt="${data.name || 'Style'}" 
                         class="menu-item-image"
                         onerror="this.style.display='none'; this.parentElement.style.background='linear-gradient(135deg, #667eea 0%, #764ba2 100%)'">
                    <div style="position: absolute; bottom: 0; left: 0; right: 0; background: rgba(0,0,0,0.8); padding: 10px; text-align: center;">
                        <div style="font-size: 11px; color: #ccc;">${data.code || ''}</div>
                        <div style="font-size: 13px; color: white; margin-top: 3px; font-weight: 500;">${data.name || ''}</div>
                    </div>
                `;
                
                item.addEventListener('click', function() {
                    showStyleDetail(data.code, data.name, gender, data.imageUrl, doc.id);
                });
                
                menuGrid.appendChild(item);
                styleCount++;
            });
            
            console.log(`‚úÖ ${styleCount}Í∞ú Ïä§ÌÉÄÏùº Î°úÎìú ÏôÑÎ£å: ${categoryName} - ${subcategory}`);
            
        } catch (error) {
            console.error('‚ùå Ïä§ÌÉÄÏùº Î°úÎìú Ïò§Î•ò:', error);
            menuGrid.innerHTML = `
                <div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #ff4444;">
                    <div style="font-size: 48px; margin-bottom: 20px;">‚ö†Ô∏è</div>
                    <div style="font-size: 16px; margin-bottom: 8px;">Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®</div>
                    <div style="font-size: 12px; color: #999;">${error.message}</div>
                </div>
            `;
        }
    }

    // Modal Functions
    function closeModal() {
        if (styleModal) {
            styleModal.classList.remove('active');
        }
    }

    // Show Style Detail Modal with Enhanced Features
    function showStyleDetail(code, name, gender, imageSrc, docId) {
        if (!styleModal) return;
        
        // Î™®Îã¨ Ïù¥ÎØ∏ÏßÄ ÏÑ§Ï†ï
        if (modalImage) {
            modalImage.src = imageSrc || '';
            modalImage.onerror = function() {
                this.style.display = 'none';
                this.parentElement.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
            };
        }
        
        // Î™®Îã¨ Ï†ïÎ≥¥ ÏÑ§Ï†ï
        if (modalCode) modalCode.textContent = code || '';
        if (modalName) modalName.textContent = name || '';
        
        // ÏÑ±Î≥ÑÏóê Îî∞Î•∏ Î≤ÑÌäº Ïä§ÌÉÄÏùº Ï†ÅÏö©
        if (btnRegister) {
            btnRegister.classList.toggle('female', gender === 'female');
        }
        
        // Ï¢ãÏïÑÏöî ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        if (btnLike) {
            btnLike.classList.remove('active');
            const heart = btnLike.querySelector('span:first-child');
            if (heart) heart.textContent = '‚ô°';
        }
        
        // Î™®Îã¨ ÌëúÏãú
        styleModal.classList.add('active');
        
        // Í≥†Í∞ù Îì±Î°ù Î≤ÑÌäº Ïù¥Î≤§Ìä∏
        if (btnRegister) {
            btnRegister.onclick = async function() {
                await handleCustomerRegistration(code, name, docId, gender);
            };
        }
        
        // Ï¢ãÏïÑÏöî Î≤ÑÌäº Ïù¥Î≤§Ìä∏
        if (btnLike) {
            btnLike.onclick = async function() {
                await handleLikeToggle(this, docId);
            };
        }
        
        console.log(`üé≠ Î™®Îã¨ ÌëúÏãú: ${code} - ${name}`);
    }

    // Customer Registration Handler
    async function handleCustomerRegistration(code, name, docId, gender) {
        const customerName = prompt('Í≥†Í∞ù Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:');
        if (!customerName) return;
        
        const customerPhone = prompt('Ï†ÑÌôîÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: 010-1234-5678):');
        if (!customerPhone) return;
        
        try {
            await db.collection('customers').add({
                name: customerName,
                phone: customerPhone,
                styleCode: code,
                styleName: name,
                styleId: docId,
                gender: gender,
                designer: localStorage.getItem('designerName') || 'Unknown',
                registeredAt: new Date(),
                lastVisit: new Date()
            });
            
            showToast('‚úÖ Í≥†Í∞ù Îì±Î°ù ÏôÑÎ£å!');
            console.log(`‚úÖ Í≥†Í∞ù Îì±Î°ù: ${customerName} - ${code}`);
            closeModal();
        } catch (error) {
            console.error('‚ùå Í≥†Í∞ù Îì±Î°ù Ïò§Î•ò:', error);
            showToast('‚ùå Îì±Î°ù Ïã§Ìå®: ' + error.message);
        }
    }

    // Like Toggle Handler
    async function handleLikeToggle(button, docId) {
        button.classList.toggle('active');
        const heart = button.querySelector('span:first-child');
        
        if (heart) {
            const isLiked = button.classList.contains('active');
            heart.textContent = isLiked ? '‚ô•' : '‚ô°';
            
            // FirebaseÏóê Ï¢ãÏïÑÏöî ÏóÖÎç∞Ïù¥Ìä∏
            if (docId && typeof firebase !== 'undefined') {
                try {
                    const docRef = db.collection('hairstyles').doc(docId);
                    await docRef.update({
                        likes: firebase.firestore.FieldValue.increment(isLiked ? 1 : -1)
                    });
                    console.log(`${isLiked ? '‚ù§Ô∏è' : 'üíî'} Ï¢ãÏïÑÏöî ÏóÖÎç∞Ïù¥Ìä∏: ${docId}`);
                } catch (error) {
                    console.error('‚ùå Ï¢ãÏïÑÏöî ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
                }
            }
        }
    }

    // Loading Functions
    function showLoading(show) {
        if (loadingOverlay) {
            loadingOverlay.classList.toggle('active', show);
        }
    }

    // Toast Message Function
    function showToast(message) {
        // Í∏∞Ï°¥ ÌÜ†Ïä§Ìä∏ Ï†úÍ±∞
        const existingToast = document.querySelector('.toast-message');
        if (existingToast) {
            existingToast.remove();
        }
        
        // ÏÉà ÌÜ†Ïä§Ìä∏ ÏÉùÏÑ±
        const toast = document.createElement('div');
        toast.className = 'toast-message';
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed;
            top: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: #333;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            font-size: 14px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            animation: toastSlideIn 0.3s ease-out;
        `;
        
        document.body.appendChild(toast);
        
        // 3Ï¥à ÌõÑ ÏûêÎèô Ï†úÍ±∞
        setTimeout(() => {
            if (toast.parentNode) {
                toast.style.animation = 'toastSlideOut 0.3s ease-in';
                setTimeout(() => toast.remove(), 300);
            }
        }, 3000);
    }

    // Auto Gender Selection (ÏÑ†ÌÉùÏ†Å)
    const savedGender = localStorage.getItem('hairgator_gender');
    if (savedGender && savedGender !== 'null' && !currentGender) {
        console.log(`üîÑ Ïù¥Ï†Ñ ÏÑ±Î≥Ñ ÏÑ†ÌÉù Î≥µÏõê: ${savedGender}`);
        // ÌïÑÏöîÏãú Ï£ºÏÑù Ìï¥Ï†ú: setTimeout(() => selectGender(savedGender), 100);
    }

    // Performance Monitoring
    console.log('üöÄ HAIRGATOR Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï§ÄÎπÑ ÏôÑÎ£å');
});

// Window Load Event
window.addEventListener('load', function() {
    console.log('ü¶é HAIRGATOR Ïï± ÏôÑÏ†Ñ Î°úÎìú ÏôÑÎ£å');
    
    // CSS Ïï†ÎãàÎ©îÏù¥ÏÖò Ï∂îÍ∞Ä
    const style = document.createElement('style');
    style.textContent = `
        @keyframes toastSlideIn {
            from { transform: translateX(-50%) translateY(-20px); opacity: 0; }
            to { transform: translateX(-50%) translateY(0); opacity: 1; }
        }
        
        @keyframes toastSlideOut {
            from { transform: translateX(-50%) translateY(0); opacity: 1; }
            to { transform: translateX(-50%) translateY(-20px); opacity: 0; }
        }
        
        .menu-item {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .menu-item:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
    `;
    document.head.appendChild(style);
});

// ========== üé® ÌÖåÎßà ÏãúÏä§ÌÖú ÌôïÏû• (main.js Îß® ÏïÑÎûò Ï∂îÍ∞Ä) ==========
// Í∏∞Ï°¥ toggleTheme Ìï®ÏàòÎäî Í∑∏ÎåÄÎ°ú ÎëêÍ≥†, ÌôïÏû• Í∏∞Îä•Îßå Ï∂îÍ∞Ä

(function extendThemeSystem() {
    'use strict';
    
    // üé® ÌÖåÎßà ÏÑ§Ï†ï (ÏÉà ÌÖåÎßà Ï∂îÍ∞ÄÌïòÍ∏∞ ÏâΩÍ≤å!)
    const THEME_CONFIG = {
        dark: { 
            name: 'Îã§ÌÅ¨ Î™®Îìú', 
            icon: 'üåô',
            className: '' // Í∏∞Î≥∏Í∞í
        },
        light: { 
            name: 'ÎùºÏù¥Ìä∏ Î™®Îìú', 
            icon: '‚òÄÔ∏è',
            className: 'light-theme' 
        }
        // ÎÇòÏ§ëÏóê ÏâΩÍ≤å Ï∂îÍ∞Ä:
        // blue: { name: 'Î∏îÎ£® Î™®Îìú', icon: 'üåä', className: 'blue-theme' },
        // green: { name: 'Í∑∏Î¶∞ Î™®Îìú', icon: 'üå±', className: 'green-theme' }
    };
    
    // üîÑ ÌôïÏû•Îêú ÌÖåÎßà ÌÜ†Í∏Ä Ìï®Ïàò (Í∏∞Ï°¥ Ìï®Ïàò ÎåÄÏ≤¥)
    window.toggleThemeExtended = function() {
        const themeKeys = Object.keys(THEME_CONFIG);
        const currentTheme = getCurrentTheme();
        const currentIndex = themeKeys.indexOf(currentTheme);
        const nextIndex = (currentIndex + 1) % themeKeys.length;
        const nextTheme = themeKeys[nextIndex];
        
        applyTheme(nextTheme);
        updateThemeUI(nextTheme);
        
        console.log(`üé® ÌÖåÎßà Î≥ÄÍ≤Ω: ${THEME_CONFIG[nextTheme].name}`);
        showToast(`${THEME_CONFIG[nextTheme].name}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§`);
    };
    
    // üéØ ÌäπÏ†ï ÌÖåÎßàÎ°ú ÏßÅÏ†ë Î≥ÄÍ≤Ω
    window.setTheme = function(themeName) {
        if (THEME_CONFIG[themeName]) {
            applyTheme(themeName);
            updateThemeUI(themeName);
            
            // ÏÇ¨Ïù¥ÎìúÎ∞î Îã´Í∏∞
            if (typeof closeSidebar === 'function') {
                closeSidebar();
            }
            
            console.log(`üé® ÌÖåÎßà ÏÑ§Ï†ï: ${THEME_CONFIG[themeName].name}`);
            showToast(`${THEME_CONFIG[themeName].name}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§`);
        }
    };
    
    // üé® ÌÖåÎßà Ï†ÅÏö© Ìï®Ïàò
    function applyTheme(themeName) {
        const theme = THEME_CONFIG[themeName];
        if (!theme) return;
        
        // Î™®Îì† ÌÖåÎßà ÌÅ¥ÎûòÏä§ Ï†úÍ±∞
        Object.values(THEME_CONFIG).forEach(t => {
            if (t.className) document.body.classList.remove(t.className);
        });
        
        // ÏÉà ÌÖåÎßà Ï†ÅÏö©
        if (theme.className) {
            document.body.classList.add(theme.className);
        }
        
        // ÏÉÅÌÉú Ï†ÄÏû•
        localStorage.setItem('hairgator_theme', themeName);
    }
    
    // üì± UI ÏóÖÎç∞Ïù¥Ìä∏
    function updateThemeUI(themeName) {
        const theme = THEME_CONFIG[themeName];
        
        // ÌÖåÎßà ÏïÑÏù¥ÏΩò ÏóÖÎç∞Ïù¥Ìä∏ (Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)
        const themeStatus = document.getElementById('themeStatus');
        if (themeStatus) {
            themeStatus.textContent = themeName === 'dark' ? 'ON' : 'OFF';
        }
        
        // ÏÉàÎ°úÏö¥: ÏïÑÏù¥ÏΩò ÏóÖÎç∞Ïù¥Ìä∏
        const themeIcons = document.querySelectorAll('.theme-icon');
        themeIcons.forEach(icon => {
            if (icon) icon.textContent = theme.icon;
        });
        
        // ÏÇ¨Ïù¥ÎìúÎ∞î ÌÖåÎßà ÏòµÏÖò ÏóÖÎç∞Ïù¥Ìä∏
        updateSidebarThemeOptions(themeName);
    }
    
    // üéõÔ∏è ÏÇ¨Ïù¥ÎìúÎ∞î ÌÖåÎßà ÏòµÏÖò ÏóÖÎç∞Ïù¥Ìä∏
    function updateSidebarThemeOptions(currentTheme) {
        const themeOptions = document.querySelector('.theme-options');
        if (!themeOptions) return;
        
        // ÎèôÏ†ÅÏúºÎ°ú ÌÖåÎßà ÏòµÏÖò ÏÉùÏÑ±
        themeOptions.innerHTML = '';
        
        Object.entries(THEME_CONFIG).forEach(([key, theme]) => {
            const option = document.createElement('button');
            option.className = `theme-option ${key === currentTheme ? 'active' : ''}`;
            option.dataset.theme = key;
            
            option.innerHTML = `
                <span class="theme-preview ${theme.className || 'dark'}"></span>
                <span>${theme.name}</span>
            `;
            
            option.addEventListener('click', () => setTheme(key));
            themeOptions.appendChild(option);
        });
    }
    
    // üîç ÌòÑÏû¨ ÌÖåÎßà Í∞êÏßÄ
    function getCurrentTheme() {
        const hasLightClass = document.body.classList.contains('light-theme');
        return hasLightClass ? 'light' : 'dark';
    }
    
    // üì¢ ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ (Í∏∞Ï°¥ showToast Ìï®Ïàò ÌôúÏö©)
    function showToast(message) {
        if (typeof window.showToast === 'function') {
            window.showToast(message);
        } else {
            console.log('üì¢ ' + message);
        }
    }
    
    // üöÄ Ï¥àÍ∏∞Ìôî (Í∏∞Ï°¥ ÌÖåÎßà ÏÉÅÌÉú Î≥µÏõê)
    function initExtendedTheme() {
        const savedTheme = localStorage.getItem('hairgator_theme') || 'dark';
        updateThemeUI(savedTheme);
        
        console.log('‚úÖ ÌôïÏû• ÌÖåÎßà ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî:', THEME_CONFIG[savedTheme]?.name);
    }
    
    // üîÑ Í∏∞Ï°¥ toggleTheme Ìï®ÏàòÎ•º ÌôïÏû•Îêú Î≤ÑÏ†ÑÏúºÎ°ú ÍµêÏ≤¥ (ÏÑ†ÌÉùÏ†Å)
    // window.toggleTheme = window.toggleThemeExtended;
    
    // ÌéòÏù¥ÏßÄ Î°úÎìú ÏôÑÎ£å ÌõÑ Ï¥àÍ∏∞Ìôî
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initExtendedTheme);
    } else {
        initExtendedTheme();
    }
    
    console.log('üé® ÌÖåÎßà ÌôïÏû• ÏãúÏä§ÌÖú Î°úÎìú ÏôÑÎ£å');
    console.log('ÏÇ¨Ïö©Î≤ï: setTheme("light"), toggleThemeExtended()');
    
})();

// ========== üåü ÏÉà ÌÖåÎßà Ï∂îÍ∞Ä Í∞ÄÏù¥Îìú ==========
/*
ÏÉà ÌÖåÎßà Ï∂îÍ∞ÄÌïòÎäî Î∞©Î≤ï:

1. THEME_CONFIGÏóê ÌÖåÎßà Ï∂îÍ∞Ä:
   blue: { name: 'Î∏îÎ£® Î™®Îìú', icon: 'üåä', className: 'blue-theme' }

2. main.cssÏóê CSS Ï∂îÍ∞Ä:
   body.blue-theme {
       background: #0d1421;
       color: #e3f2fd;
   }
   // ... ÎÇòÎ®∏ÏßÄ Ïä§ÌÉÄÏùºÎì§

3. ÎÅù! ÏûêÎèôÏúºÎ°ú ÏÇ¨Ïù¥ÎìúÎ∞îÏóê Ï∂îÍ∞ÄÎêòÍ≥† ÌÜ†Í∏Ä Í∞ÄÎä•Ìï¥Ïßê
*/

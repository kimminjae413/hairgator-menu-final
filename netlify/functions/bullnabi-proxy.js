// HAIRGATOR Î∂àÎÇòÎπÑ API ÌîÑÎ°ùÏãú ÏÑúÎ≤Ñ - ÌÜ†ÌÅ∞ ÏûêÎèô Í∞±Ïã† ÏãúÏä§ÌÖú ÏôÑÏÑ± Î≤ÑÏ†Ñ
// refreshToken, getUserToken, getUserData action ÏßÄÏõê

// ========== üîÑ ÌÜ†ÌÅ∞ ÏûêÎèô Í∞±Ïã† ÏãúÏä§ÌÖú ==========

/**
 * Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏ÏúºÎ°ú ÏÉà ÌÜ†ÌÅ∞ Î∞úÍ∏â
 */
async function handleRefreshToken() {
    try {
        const loginId = process.env.BULLNABI_LOGIN_ID;
        const loginPw = process.env.BULLNABI_LOGIN_PW;
        
        if (!loginId || !loginPw) {
            console.error('‚ùå Î°úÍ∑∏Ïù∏ ÌôòÍ≤ΩÎ≥ÄÏàò ÏóÜÏùå');
            return { success: false, error: 'Missing login credentials' };
        }
        
        console.log('üîë ÌÜ†ÌÅ∞ ÏûêÎèô Í∞±Ïã† ÏãúÏûë...');
        console.log('- loginId:', loginId);
        
        // documentJson Í∞ùÏ≤¥ ÏÉùÏÑ±
        const documentJson = {
            loginId: loginId,
            loginPw: loginPw,
            isShortToken: true
        };
        
        // URL-encoded ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
        const formBody = `documentJson=${encodeURIComponent(JSON.stringify(documentJson))}`;
        
        const response = await fetch('https://drylink.ohmyapp.io/bnb/user/token/loginByEmail', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: formBody
        });
        
        console.log('üì° Î°úÍ∑∏Ïù∏ API ÏùëÎãµ:', response.status);
        
        if (!response.ok) {
            throw new Error(`Login failed: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('üìã Î°úÍ∑∏Ïù∏ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', JSON.stringify(data).substring(0, 200));
        
        // ÏùëÎãµÏóêÏÑú ÌÜ†ÌÅ∞ Ï∂îÏ∂ú (Î∂àÎÇòÎπÑ API ÏùëÎãµ Íµ¨Ï°∞)
        const newToken = data.data?.token || data.token || data.data;
        
        if (newToken && typeof newToken === 'string') {
            // Îü∞ÌÉÄÏûÑ ÌôòÍ≤ΩÎ≥ÄÏàò ÏóÖÎç∞Ïù¥Ìä∏
            process.env.BULLNABI_TOKEN = newToken;
            console.log('‚úÖ ÌÜ†ÌÅ∞ ÏûêÎèô Í∞±Ïã† ÏÑ±Í≥µ:', newToken.substring(0, 20) + '...');
            
            return {
                success: true,
                token: newToken,
                refreshedAt: new Date().toISOString()
            };
        }
        
        console.error('‚ùå ÏùëÎãµÏóê ÌÜ†ÌÅ∞ ÏóÜÏùå:', data);
        return { success: false, error: 'No token in response', responseData: data };
        
    } catch (error) {
        console.error('‚ùå ÌÜ†ÌÅ∞ Í∞±Ïã† Ïã§Ìå®:', error);
        return { success: false, error: error.message };
    }
}

/**
 * ÌÜ†ÌÅ∞ ÎßåÎ£å Ïó¨Î∂Ä Ï≤¥ÌÅ¨ (ÎçîÎØ∏ ÏøºÎ¶¨)
 */
async function isTokenExpired(token) {
    try {
        console.log('üîç ÌÜ†ÌÅ∞ ÎßåÎ£å Ï≤¥ÌÅ¨ ÏãúÏûë...');
        
        const testQuery = {
            "pipeline": {
                "$match": { "_id": { "$oid": "000000000000000000000000" } },
                "$limit": 1
            }
        };
        
        const params = new URLSearchParams();
        params.append('metaCode', '_users');
        params.append('collectionName', '_users');
        params.append('documentJson', JSON.stringify(testQuery));
        
        const FormData = require('form-data');
        const formData = new FormData();
        
        const response = await fetch(
            `http://drylink.ohmyapp.io/bnb/aggregateForTableWithDocTimeline?${params.toString()}`,
            {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': 'application/json',
                    ...formData.getHeaders()
                },
                body: formData
            }
        );
        
        const data = await response.json();
        
        // code === -110Ïù¥Î©¥ ÌÜ†ÌÅ∞ ÎßåÎ£å
        if (data.code === -110 || data.code === '-110') {
            console.log('üïê ÌÜ†ÌÅ∞ ÎßåÎ£å Í∞êÏßÄ (code: -110)');
            return true;
        }
        
        console.log('‚úÖ ÌÜ†ÌÅ∞ Ïú†Ìö®Ìï®');
        return false;
        
    } catch (error) {
        console.error('‚ö†Ô∏è ÌÜ†ÌÅ∞ Ï≤¥ÌÅ¨ Ïã§Ìå®:', error);
        return true; // ÏóêÎü¨ Ïãú ÎßåÎ£åÎ°ú Í∞ÑÏ£º
    }
}

/**
 * ÏÇ¨Ïö©ÏûêÎ≥Ñ ÌÜ†ÌÅ∞ Î∞úÍ∏â (Ïã§Ï†úÎ°úÎäî Í¥ÄÎ¶¨Ïûê ÌÜ†ÌÅ∞ Î∞òÌôò)
 */
async function handleGetUserToken(userId) {
    try {
        console.log('üîë ÏÇ¨Ïö©Ïûê ÌÜ†ÌÅ∞ ÏöîÏ≤≠:', userId);
        
        let adminToken = process.env.BULLNABI_TOKEN;
        let wasRefreshed = false;
        
        if (!adminToken) {
            console.log('‚ö†Ô∏è Ï¥àÍ∏∞ ÌÜ†ÌÅ∞ ÏóÜÏùå, Ï¶âÏãú Í∞±Ïã† ÏãúÎèÑ');
            const refreshResult = await handleRefreshToken();
            
            if (refreshResult.success) {
                adminToken = refreshResult.token;
                wasRefreshed = true;
            } else {
                return {
                    success: false,
                    error: 'Ï¥àÍ∏∞ ÌÜ†ÌÅ∞ Î∞úÍ∏â Ïã§Ìå®',
                    details: refreshResult.error
                };
            }
        } else {
            // ÌÜ†ÌÅ∞ ÎßåÎ£å Ï≤¥ÌÅ¨
            const expired = await isTokenExpired(adminToken);
            
            if (expired) {
                console.log('üîÑ ÌÜ†ÌÅ∞ ÎßåÎ£åÎê®, ÏûêÎèô Í∞±Ïã† ÏãúÎèÑ...');
                const refreshResult = await handleRefreshToken();
                
                if (refreshResult.success) {
                    adminToken = refreshResult.token;
                    wasRefreshed = true;
                } else {
                    return {
                        success: false,
                        error: 'ÌÜ†ÌÅ∞ Í∞±Ïã† Ïã§Ìå®',
                        details: refreshResult.error
                    };
                }
            }
        }
        
        // Í¥ÄÎ¶¨Ïûê ÌÜ†ÌÅ∞ÏùÑ "ÏÇ¨Ïö©Ïûê ÌÜ†ÌÅ∞"ÏúºÎ°ú Î∞òÌôò
        return {
            success: true,
            token: adminToken,
            userId: userId,
            autoRefreshed: wasRefreshed,
            expiresIn: 50 * 60 * 1000, // 50Î∂Ñ (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∫êÏã±Ïö©)
            note: 'Using admin token as user token with auto-refresh'
        };
        
    } catch (error) {
        console.error('‚ùå ÏÇ¨Ïö©Ïûê ÌÜ†ÌÅ∞ Î∞úÍ∏â Ïã§Ìå®:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
 */
async function handleGetUserData(token, userId) {
    try {
        console.log('üìä ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå:', userId);
        
        const metaCode = '_users';
        const collectionName = '_users';
        const documentJson = {
            "pipeline": {
                "$match": {
                    "_id": {"$oid": userId}
                },
                "$project": {
                    "nickname": 1,
                    "email": 1,
                    "remainCount": 1,
                    "name": 1,
                    "phone": 1,
                    "_createTime": 1,
                    "_updateTime": 1
                }
            }
        };

        const params = new URLSearchParams();
        params.append('metaCode', metaCode);
        params.append('collectionName', collectionName);
        params.append('documentJson', JSON.stringify(documentJson));

        const url = `http://drylink.ohmyapp.io/bnb/aggregateForTableWithDocTimeline?${params.toString()}`;

        const FormData = require('form-data');
        const formData = new FormData();

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                ...formData.getHeaders()
            },
            body: formData
        });

        const responseText = await response.text();
        const apiData = JSON.parse(responseText);
        
        // ÌÜ†ÌÅ∞ ÎßåÎ£å Ï≤¥ÌÅ¨
        if (apiData.code === -110 || apiData.code === '-110') {
            return {
                success: false,
                needRefresh: true,
                error: 'Token expired',
                code: apiData.code
            };
        }
        
        if (apiData.data && apiData.data.length > 0) {
            const userData = apiData.data[0];
            
            return {
                success: true,
                data: [{
                    userId: userData._id?.$oid || userId,
                    nickname: userData.nickname || userData.name || 'Î∂àÎÇòÎπÑ ÏÇ¨Ïö©Ïûê',
                    name: userData.name || userData.nickname || 'ÏÇ¨Ïö©Ïûê',
                    email: userData.email || '',
                    phone: userData.phone || '',
                    remainCount: userData.remainCount || 0,
                    _createTime: userData._createTime,
                    _updateTime: userData._updateTime
                }]
            };
        }
        
        return {
            success: false,
            error: 'No data found',
            apiResponse: apiData
        };
        
    } catch (error) {
        console.error('‚ùå ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// ========== Î©îÏù∏ Ìï∏Îì§Îü¨ ==========

exports.handler = async (event, context) => {
    // CORS Ìó§Îçî ÏÑ§Ï†ï
    const corsHeaders = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
    };

    // OPTIONS ÏöîÏ≤≠ Ï≤òÎ¶¨
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers: corsHeaders,
            body: JSON.stringify({ message: 'CORS OK' })
        };
    }

    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers: corsHeaders,
            body: JSON.stringify({ error: 'Method not allowed' })
        };
    }

    try {
        const requestBody = JSON.parse(event.body);
        const { action, userId, userToken, token, data } = requestBody;
        
        console.log('üìù ÏöîÏ≤≠ Ï†ïÎ≥¥:');
        console.log('- action:', action);
        console.log('- userId:', userId);
        console.log('- userToken ÏûàÏùå:', !!userToken);
        console.log('- token ÏûàÏùå:', !!token);

        // ========== ActionÎ≥Ñ Î∂ÑÍ∏∞ Ï≤òÎ¶¨ ==========

        // 1. ÌÜ†ÌÅ∞ ÏûêÎèô Í∞±Ïã† ÏöîÏ≤≠
        if (action === 'refreshToken') {
            console.log('üîÑ ÌÜ†ÌÅ∞ Í∞±Ïã† ÏöîÏ≤≠ Ï≤òÎ¶¨');
            const result = await handleRefreshToken();
            return {
                statusCode: result.success ? 200 : 500,
                headers: corsHeaders,
                body: JSON.stringify(result)
            };
        }

        // 2. ÏÇ¨Ïö©ÏûêÎ≥Ñ ÌÜ†ÌÅ∞ Î∞úÍ∏â ÏöîÏ≤≠
        if (action === 'getUserToken') {
            console.log('üîë ÏÇ¨Ïö©Ïûê ÌÜ†ÌÅ∞ Î∞úÍ∏â ÏöîÏ≤≠ Ï≤òÎ¶¨');
            
            if (!userId) {
                return {
                    statusCode: 400,
                    headers: corsHeaders,
                    body: JSON.stringify({ success: false, error: 'userId required' })
                };
            }
            
            const result = await handleGetUserToken(userId);
            return {
                statusCode: result.success ? 200 : 500,
                headers: corsHeaders,
                body: JSON.stringify(result)
            };
        }

        // 3. ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
        if (action === 'getUserData') {
            console.log('üìä ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏöîÏ≤≠ Ï≤òÎ¶¨');
            
            if (!token || !userId) {
                return {
                    statusCode: 400,
                    headers: corsHeaders,
                    body: JSON.stringify({ success: false, error: 'token and userId required' })
                };
            }
            
            const result = await handleGetUserData(token, userId);
            return {
                statusCode: result.success ? 200 : 500,
                headers: corsHeaders,
                body: JSON.stringify(result)
            };
        }

        // ========== Í∏∞Ï°¥ Î∞©Ïãù (action ÏóÜÏùå) ==========
        // userIdÏôÄ userTokenÏúºÎ°ú ÏßÅÏ†ë Ï°∞Ìöå
        
        console.log('üìù Í∏∞Ï°¥ Î∞©Ïãù Ï≤òÎ¶¨ (action ÏóÜÏùå)');
        
        if (!userId) {
            return {
                statusCode: 400,
                headers: corsHeaders,
                body: JSON.stringify({ error: 'userIdÎäî ÌïÑÏàòÏûÖÎãàÎã§' })
            };
        }

        // üÜï ÌÜ†ÌÅ∞ Ïö∞ÏÑ†ÏàúÏúÑ: ÎèôÏ†Å ÌÜ†ÌÅ∞ > ÌôòÍ≤ΩÎ≥ÄÏàò ÌÜ†ÌÅ∞
        let finalToken;
        let tokenSource;
        
        if (userToken && userToken.trim()) {
            // 1ÏàúÏúÑ: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ ÎèôÏ†Å ÌÜ†ÌÅ∞
            finalToken = userToken.trim();
            tokenSource = 'dynamic_user_token';
            console.log('‚úÖ ÎèôÏ†Å ÌÜ†ÌÅ∞ ÏÇ¨Ïö©:', finalToken.substring(0, 20) + '...');
        } else {
            // 2ÏàúÏúÑ: ÌôòÍ≤ΩÎ≥ÄÏàò Í≥†Ï†ï ÌÜ†ÌÅ∞ (Î∞±ÏóÖÏö©)
            finalToken = process.env.BULLNABI_TOKEN;
            tokenSource = 'environment_variable';
            console.log('üîÑ ÌôòÍ≤ΩÎ≥ÄÏàò ÌÜ†ÌÅ∞ ÏÇ¨Ïö© (Î∞±ÏóÖ):', finalToken ? finalToken.substring(0, 20) + '...' : 'null');
        }
        
        if (!finalToken) {
            console.error('‚ùå ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§');
            return {
                statusCode: 500,
                headers: corsHeaders,
                body: JSON.stringify({ 
                    success: false, 
                    error: 'ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.',
                    tokenSource: 'none'
                })
            };
        }

        // API Î¨∏ÏÑúÏóê Îî∞Î•∏ Ï†ïÌôïÌïú ÏöîÏ≤≠ Íµ¨Ï°∞
        const metaCode = '_users';
        const collectionName = '_users';
        const documentJson = {
            "pipeline": {
                "$match": {
                    "_id": {"$oid": userId}
                },
                "$project": {
                    "nickname": 1,
                    "email": 1,
                    "remainCount": 1,
                    "name": 1,
                    "phone": 1,
                    "_createTime": 1,
                    "_updateTime": 1
                }
            }
        };

        // Query ParametersÎ°ú Ï†ÑÏÜ°
        const params = new URLSearchParams();
        params.append('metaCode', metaCode);
        params.append('collectionName', collectionName);
        params.append('documentJson', JSON.stringify(documentJson));

        const url = `http://drylink.ohmyapp.io/bnb/aggregateForTableWithDocTimeline?${params.toString()}`;

        console.log('üåê API ÏöîÏ≤≠ Ï†ïÎ≥¥:');
        console.log('- URL:', url);
        console.log('- ÌÜ†ÌÅ∞ ÏÜåÏä§:', tokenSource);
        console.log('- documentJson:', JSON.stringify(documentJson));

        // FormDataÎäî Îπà bodyÎ°ú Ï†ÑÏÜ°
        const FormData = require('form-data');
        const formData = new FormData();

        // API Ìò∏Ï∂ú (Bearer Ï†ëÎëêÏÇ¨ ÌïÑÏàò)
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${finalToken}`,
                'Accept': 'application/json',
                ...formData.getHeaders()
            },
            body: formData
        });

        console.log('üì° Î∂àÎÇòÎπÑ API ÏùëÎãµ:');
        console.log('- ÏÉÅÌÉú ÏΩîÎìú:', response.status);
        console.log('- ÏùëÎãµ Ìó§Îçî:', JSON.stringify([...response.headers.entries()]));
        
        const responseText = await response.text();
        console.log('- ÏùëÎãµ Í∏∏Ïù¥:', responseText.length);
        console.log('- ÏùëÎãµ ÎÇ¥Ïö©:', responseText);

        if (responseText && responseText.length > 0) {
            try {
                const apiData = JSON.parse(responseText);
                console.log('‚úÖ JSON ÌååÏã± ÏÑ±Í≥µ');
                
                // API ÏùëÎãµ ÌôïÏù∏ (data Î∞∞Ïó¥Ïù¥ ÏûàÏúºÎ©¥ ÏÑ±Í≥µ)
                if (apiData.data && apiData.data.length > 0) {
                    // Ïã§Ï†ú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú
                    const userData = apiData.data[0];
                    
                    const userInfo = {
                        name: userData.nickname || userData.name || 'Î∂àÎÇòÎπÑ ÏÇ¨Ïö©Ïûê',
                        phone: userData.phone || userData.email || 'unknown',
                        remainCount: userData.remainCount || 0,
                        lastLoginDate: new Date().toISOString(),
                        source: 'bullnabi_api_success',
                        userId: userData._id?.$oid || userId,
                        email: userData.email
                    };

                    console.log('‚úÖ Ïã§Ï†ú Î∂àÎÇòÎπÑ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú ÏÑ±Í≥µ:', userInfo);

                    return {
                        statusCode: 200,
                        headers: corsHeaders,
                        body: JSON.stringify({
                            success: true,
                            userInfo: userInfo,
                            debug: {
                                method: 'api_success_with_' + tokenSource,
                                tokenSource: tokenSource,
                                dataFound: true,
                                apiResponseLength: responseText.length,
                                recordsTotal: apiData.recordsTotal,
                                recordsFiltered: apiData.recordsFiltered,
                                usedDynamicToken: tokenSource === 'dynamic_user_token'
                            }
                        })
                    };
                } else {
                    // API ÏùëÎãµÏùÄ ÏûàÏßÄÎßå Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÍ±∞ÎÇò Ïò§Î•òÏù∏ Í≤ΩÏö∞
                    console.log('‚ö†Ô∏è API ÏùëÎãµ Ïò§Î•ò ÎòêÎäî Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå:', apiData);
                    
                    // üÜï ÌÜ†ÌÅ∞ Ïò§Î•ò Í∞êÏßÄ Î°úÏßÅ Ï∂îÍ∞Ä
                    if (apiData.code === -110 || apiData.code === '-110' || apiData.message?.includes('ÌÜ†ÌÅ∞')) {
                        console.log('üîë ÌÜ†ÌÅ∞ Î¨∏Ï†ú Í∞êÏßÄ:', apiData.message);
                        
                        return {
                            statusCode: 401,
                            headers: corsHeaders,
                            body: JSON.stringify({
                                success: false,
                                error: 'TOKEN_ERROR',
                                message: 'ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                                tokenSource: tokenSource,
                                apiResponse: apiData,
                                debug: {
                                    tokenProblem: true,
                                    apiCode: apiData.code,
                                    apiMessage: apiData.message
                                }
                            })
                        };
                    }
                }
                
            } catch (parseError) {
                console.error('‚ùå JSON ÌååÏã± Ïã§Ìå®:', parseError);
            }
        }

        // Ïã§Ìå® Ïãú fallback
        console.log('‚ùå API Ïã§Ìå®, fallback ÏÇ¨Ïö©');
        
        const fallbackUserInfo = {
            name: 'ÍπÄÎØºÏû¨',
            phone: '708eric@hanmail.net',
            remainCount: 360,
            lastLoginDate: new Date().toISOString(),
            source: 'fallback_api_failed'
        };

        return {
            statusCode: 200,
            headers: corsHeaders,
            body: JSON.stringify({
                success: true,
                userInfo: fallbackUserInfo,
                debug: {
                    apiError: 'API Ìò∏Ï∂ú Ïã§Ìå® ÎòêÎäî ÏùëÎãµ ÌååÏã± Ïã§Ìå®',
                    responseLength: responseText?.length || 0,
                    method: 'fallback',
                    tokenSource: tokenSource,
                    rawResponse: responseText?.substring(0, 200) + '...',
                    usedDynamicToken: tokenSource === 'dynamic_user_token'
                }
            })
        };

    } catch (error) {
        console.error('‚ùå ÌîÑÎ°ùÏãú ÏÑúÎ≤Ñ Ïò§Î•ò:', error);
        
        return {
            statusCode: 500,
            headers: corsHeaders,
            body: JSON.stringify({
                success: false,
                error: error.message,
                debug: {
                    stack: error.stack,
                    timestamp: new Date().toISOString()
                }
            })
        };
    }
};
